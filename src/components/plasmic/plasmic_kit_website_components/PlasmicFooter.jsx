// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kjuFFTSZb8fanzCHT2C1jz
// Component: 9R5YynM9KVp
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: MOwsdKtDW9/component
import Divider from "../../Divider"; // plasmic-import: SQHouqji3_/component
import Logo from "../../Logo"; // plasmic-import: LC6N8oPz6C/component
import Linky from "../../Linky"; // plasmic-import: EDH0JqEGKc/component
import { ThemeContext } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 9MzawQbD5r/globalVariant
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: k7xdGnvUtPZ_s/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_plasmic_kit_website_components.module.css"; // plasmic-import: kjuFFTSZb8fanzCHT2C1jz/projectcss
import * as sty from "./PlasmicFooter.module.css"; // plasmic-import: 9R5YynM9KVp/css

export const PlasmicFooter__VariantProps = new Array();

export const PlasmicFooter__ArgProps = new Array();

function PlasmicFooter__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    theme: React.useContext(ThemeContext),
    screen: useScreenVariants()
  });

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__global_theme_dark]: hasVariant(
          globalVariants,
          "theme",
          "dark"
        )
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"container"}
        data-plasmic-override={overrides.container}
        hasGap={true}
        className={classNames(defaultcss.all, sty.container)}
      >
        {false ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__yZcn)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__pfTuy)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__nl7Wd
                )}
              >
                {"Subscribe for updates"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__fOHaQ
                )}
              >
                {"Announcements of our latest features and news."}
              </div>
            </p.Stack>

            <p.Stack
              as={"form"}
              data-plasmic-name={"subscribeForm"}
              data-plasmic-override={overrides.subscribeForm}
              hasGap={true}
              className={classNames(defaultcss.all, sty.subscribeForm)}
            >
              <TextInput
                data-plasmic-name={"subscribeInput"}
                data-plasmic-override={overrides.subscribeInput}
                className={classNames("__wab_instance", sty.subscribeInput)}
              />

              <button
                data-plasmic-name={"subscribeButton"}
                data-plasmic-override={overrides.subscribeButton}
                className={classNames(
                  defaultcss.button,
                  defaultcss.__wab_text,
                  sty.subscribeButton
                )}
              >
                {"Subscribe"}
              </button>
            </p.Stack>
          </p.Stack>
        ) : null}

        <Divider
          data-plasmic-name={"divider"}
          data-plasmic-override={overrides.divider}
          className={classNames("__wab_instance", sty.divider)}
        />

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__btz5D)}
        >
          {(
            hasVariant(globalVariants, "screen", "mobilePortrait")
              ? false
              : true
          ) ? (
            <Logo
              data-plasmic-name={"logo"}
              data-plasmic-override={overrides.logo}
              className={classNames("__wab_instance", sty.logo)}
              type={"footer"}
            />
          ) : null}

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__ux32X, {
              [sty.box__global_theme_altHeadlineFont__ux32XfQkvX]: hasVariant(
                globalVariants,
                "theme",
                "altHeadlineFont"
              )
            })}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__ukaDt)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__xnUYy, {
                  [sty.box__global_theme_dark__xnUYyH5AZc]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  )
                })}
              >
                {false ? (
                  <div className={classNames(defaultcss.all, sty.box___8KRCf)}>
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__oPds,
                        {
                          [sty.box__global_theme_dark__oPdsH5AZc]: hasVariant(
                            globalVariants,
                            "theme",
                            "dark"
                          )
                        }
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobilePortrait")
                        ? "Product"
                        : "Product"}
                    </div>

                    <Linky
                      className={classNames(
                        "__wab_instance",
                        sty.linky__hwJsx,
                        {
                          [sty.linky__global_theme_dark__hwJsxh5AZc]:
                            hasVariant(globalVariants, "theme", "dark")
                        }
                      )}
                      leftAligned={"leftAligned"}
                      link={"/features"}
                      style={[]}
                    >
                      {"Features"}
                    </Linky>

                    <Linky
                      className={classNames(
                        "__wab_instance",
                        sty.linky___0CwmE
                      )}
                      leftAligned={"leftAligned"}
                      link={"/pricing/"}
                      style={[]}
                    >
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.box__hyUpZ
                        )}
                      >
                        {"Pricing"}
                      </div>
                    </Linky>
                  </div>
                ) : null}

                <div className={classNames(defaultcss.all, sty.box__pwGI)}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__xlcS,
                      {
                        [sty.box__global_theme_dark__xlcSH5AZc]: hasVariant(
                          globalVariants,
                          "theme",
                          "dark"
                        )
                      }
                    )}
                  >
                    {"Community"}
                  </div>

                  <Linky
                    className={classNames("__wab_instance", sty.linky__yf0S2)}
                    leftAligned={"leftAligned"}
                    link={"https://twitter.com/plasmicapp"}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box___0Xs58
                      )}
                    >
                      {"Twitter"}
                    </div>
                  </Linky>

                  <Linky
                    className={classNames("__wab_instance", sty.linky__twV4, {
                      [sty.linky__global_theme_dark__twV4H5AZc]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    })}
                    leftAligned={"leftAligned"}
                    link={"https://plasmic.app/slack"}
                  >
                    {"Slack"}
                  </Linky>

                  <Linky
                    className={classNames("__wab_instance", sty.linky__oExcY)}
                    leftAligned={"leftAligned"}
                    link={"https://medium.com/plasmic-app"}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__j625I
                      )}
                    >
                      {"Blog"}
                    </div>
                  </Linky>
                </div>
              </p.Stack>

              {false ? (
                <div
                  className={classNames(defaultcss.all, sty.box__rQwBu, {
                    [sty.box__global_theme_dark__rQwBuH5AZc]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__wDNhg,
                      {
                        [sty.box__global_theme_dark__wDNhgH5AZc]: hasVariant(
                          globalVariants,
                          "theme",
                          "dark"
                        )
                      }
                    )}
                  >
                    {"Use Cases"}
                  </div>

                  <Linky
                    className={classNames("__wab_instance", sty.linky__cauQ)}
                    link={"/cms/"}
                  >
                    {"Visual CMS"}
                  </Linky>

                  <Linky
                    className={classNames("__wab_instance", sty.linky___4Wc32)}
                    link={"/site-builder/"}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__ruH6Y
                      )}
                    >
                      {"Website Builder"}
                    </div>
                  </Linky>

                  <Linky
                    className={classNames("__wab_instance", sty.linky__xdeat, {
                      [sty.linky__global_theme_dark__xdeatH5AZc]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    })}
                    link={"/design-systems/"}
                  >
                    {"Design Systems"}
                  </Linky>

                  <Linky
                    className={classNames("__wab_instance", sty.linky__rTdIy)}
                    link={"/prototyping/"}
                  >
                    {"Prototyping"}
                  </Linky>

                  <Linky
                    className={classNames("__wab_instance", sty.linky__nsEsi, {
                      [sty.linky__global_theme_dark__nsEsih5AZc]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    })}
                    link={"/ui-builder/"}
                  >
                    {"UI Builder"}
                  </Linky>

                  <Linky
                    className={classNames("__wab_instance", sty.linky___7HSad, {
                      [sty.linky__global_theme_dark___7HSadH5AZc]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    })}
                    link={"/design-to-code/"}
                  >
                    {"Design-to-code"}
                  </Linky>
                </div>
              ) : null}
              {false ? (
                <div
                  className={classNames(defaultcss.all, sty.box__rXfit, {
                    [sty.box__global_theme_dark__rXfitH5AZc]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__v714B,
                      {
                        [sty.box__global_theme_dark__v714Bh5AZc]: hasVariant(
                          globalVariants,
                          "theme",
                          "dark"
                        )
                      }
                    )}
                  >
                    {"Solutions"}
                  </div>

                  <Linky
                    className={classNames("__wab_instance", sty.linky__vJ62E, {
                      [sty.linky__global_theme_dark__vJ62EH5AZc]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    })}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__uk88R
                      )}
                    >
                      {"Developers"}
                    </div>
                  </Linky>

                  <Linky
                    className={classNames("__wab_instance", sty.linky__uNvVy)}
                  >
                    {"Designers"}
                  </Linky>

                  <Linky
                    className={classNames("__wab_instance", sty.linky__sRc5W)}
                  >
                    {"Marketing"}
                  </Linky>

                  <Linky
                    className={classNames("__wab_instance", sty.linky__tFwOc)}
                  >
                    {"Enterprise"}
                  </Linky>

                  <Linky
                    className={classNames("__wab_instance", sty.linky__wmx6G)}
                  >
                    {"Ecommerce"}
                  </Linky>

                  <Linky
                    className={classNames("__wab_instance", sty.linky___7RF9X)}
                  >
                    {"Agencies"}
                  </Linky>
                </div>
              ) : null}

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__yQm6S, {
                  [sty.box__global_theme_dark__yQm6Sh5AZc]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  )
                })}
              >
                {false ? (
                  <div className={classNames(defaultcss.all, sty.box__kT6P)}>
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__kGiLg,
                        {
                          [sty.box__global_theme_dark__kGiLgh5AZc]: hasVariant(
                            globalVariants,
                            "theme",
                            "dark"
                          )
                        }
                      )}
                    >
                      {"Company"}
                    </div>

                    {false ? (
                      <Linky
                        className={classNames(
                          "__wab_instance",
                          sty.linky__kdvYo,
                          {
                            [sty.linky__global_theme_dark__kdvYoH5AZc]:
                              hasVariant(globalVariants, "theme", "dark")
                          }
                        )}
                        link={"/about/"}
                      >
                        {"About"}
                      </Linky>
                    ) : null}

                    <Linky
                      className={classNames(
                        "__wab_instance",
                        sty.linky___1L8Kn
                      )}
                      leftAligned={"leftAligned"}
                      link={"/careers/"}
                    >
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.box__dfC5K
                        )}
                      >
                        {"Careers"}
                      </div>
                    </Linky>
                  </div>
                ) : null}

                <div className={classNames(defaultcss.all, sty.box__ofZ1X)}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__nLqHt,
                      {
                        [sty.box__global_theme_dark__nLqHth5AZc]: hasVariant(
                          globalVariants,
                          "theme",
                          "dark"
                        )
                      }
                    )}
                  >
                    {"Resources"}
                  </div>

                  <Linky
                    className={classNames("__wab_instance", sty.linky__fvbBh)}
                    leftAligned={"leftAligned"}
                    link={"/learn/"}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box___1J3C8
                      )}
                    >
                      {"Learn"}
                    </div>
                  </Linky>

                  <Linky
                    className={classNames("__wab_instance", sty.linky__oqUd7, {
                      [sty.linky__global_theme_dark__oqUd7H5AZc]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    })}
                    leftAligned={"leftAligned"}
                    link={"https://github.com/plasmicapp/plasmic"}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__dkUw,
                        {
                          [sty.box__global_theme_dark__dkUwH5AZc]: hasVariant(
                            globalVariants,
                            "theme",
                            "dark"
                          )
                        }
                      )}
                    >
                      {"Github"}
                    </div>
                  </Linky>

                  <Linky
                    className={classNames("__wab_instance", sty.linky__sTnWe)}
                    leftAligned={"leftAligned"}
                    link={"https://www.plasmic.app/about"}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__mVkYc
                      )}
                    >
                      {"About"}
                    </div>
                  </Linky>
                </div>
              </p.Stack>
            </p.Stack>

            <div className={classNames(defaultcss.all, sty.box__g8F9L)}>
              {(
                hasVariant(globalVariants, "theme", "altHeadlineFont")
                  ? false
                  : true
              ) ? (
                <Linky
                  className={classNames("__wab_instance")}
                  link={
                    "https://studio.plasmic.app/projects/kjuFFTSZb8fanzCHT2C1jz"
                  }
                  style={["small", "solidCyan"]}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__gbj13,
                      {
                        [sty.box__global_theme_altHeadlineFont__gbj13FQkvX]:
                          hasVariant(globalVariants, "theme", "altHeadlineFont")
                      }
                    )}
                  >
                    {hasVariant(globalVariants, "theme", "altHeadlineFont") ? (
                      <span>
                        <React.Fragment>{"Built "}</React.Fragment>
                        <span style={{ fontStyle: "italic" }}>{"in"}</span>
                        <React.Fragment>
                          {" Plasmic. View this project ->"}
                        </React.Fragment>
                      </span>
                    ) : (
                      <span>
                        <React.Fragment>{"Built "}</React.Fragment>
                        <span style={{ fontStyle: "italic" }}>{"in"}</span>
                        <React.Fragment>
                          {" Plasmic. View this project ->"}
                        </React.Fragment>
                      </span>
                    )}
                  </div>
                </Linky>
              ) : null}

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box___7W8P,
                  {
                    [sty.box__global_theme_dark___7W8Ph5AZc]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  }
                )}
              >
                {"Copyright © 2021 Plasmic, Inc.\nAll rights reserved."}
              </div>

              <div className={classNames(defaultcss.all, sty.box__mW9T0)}>
                <Linky link={"/privacy/"}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__qBNkJ
                    )}
                  >
                    {"Privacy Policy"}
                  </div>
                </Linky>

                <Linky link={"/tos/"}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__pSid
                    )}
                  >
                    {"Terms and Conditions"}
                  </div>
                </Linky>
              </div>
            </div>
          </p.Stack>
        </p.Stack>
      </p.Stack>
    </section>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "container",
    "subscribeForm",
    "subscribeInput",
    "subscribeButton",
    "divider",
    "logo"
  ],

  container: [
    "container",
    "subscribeForm",
    "subscribeInput",
    "subscribeButton",
    "divider",
    "logo"
  ],

  subscribeForm: ["subscribeForm", "subscribeInput", "subscribeButton"],
  subscribeInput: ["subscribeInput"],
  subscribeButton: ["subscribeButton"],
  divider: ["divider"],
  logo: ["logo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooter__ArgProps,
      internalVariantPropNames: PlasmicFooter__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    container: makeNodeComponent("container"),
    subscribeForm: makeNodeComponent("subscribeForm"),
    subscribeInput: makeNodeComponent("subscribeInput"),
    subscribeButton: makeNodeComponent("subscribeButton"),
    divider: makeNodeComponent("divider"),
    logo: makeNodeComponent("logo"),
    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
