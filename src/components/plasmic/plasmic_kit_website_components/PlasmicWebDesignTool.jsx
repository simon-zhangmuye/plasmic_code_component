// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kjuFFTSZb8fanzCHT2C1jz
// Component: 2Zjr0RrrEeo
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import DesignLandingPage from "../../DesignLandingPage"; // plasmic-import: 2sR5PRkxYAA/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_plasmic_kit_website_components.module.css"; // plasmic-import: kjuFFTSZb8fanzCHT2C1jz/projectcss
import * as sty from "./PlasmicWebDesignTool.module.css"; // plasmic-import: 2Zjr0RrrEeo/css

export const PlasmicWebDesignTool__VariantProps = new Array();

export const PlasmicWebDesignTool__ArgProps = new Array();

function PlasmicWebDesignTool__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <React.Fragment>
      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <DesignLandingPage
            data-plasmic-name={"designLandingPage"}
            data-plasmic-override={overrides.designLandingPage}
            className={classNames("__wab_instance", sty.designLandingPage)}
            slot={"The most powerful web design tool is here."}
            slot2={
              <span>
                <React.Fragment>
                  {
                    "Layout for humans. Components and variants. Multi-view design. Tokens and mixins. Custom design systems. Code components. Seamless code integration. Zero lock-in. "
                  }
                </React.Fragment>
                <span style={{ fontWeight: 700 }}>
                  {"Ship to any production site or app."}
                </span>
              </span>
            }
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "designLandingPage"],
  designLandingPage: ["designLandingPage"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicWebDesignTool__ArgProps,
      internalVariantPropNames: PlasmicWebDesignTool__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicWebDesignTool__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWebDesignTool";
  } else {
    func.displayName = `PlasmicWebDesignTool.${nodeName}`;
  }
  return func;
}

export const PlasmicWebDesignTool = Object.assign(
  // Top-level PlasmicWebDesignTool renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    designLandingPage: makeNodeComponent("designLandingPage"),
    // Metadata about props expected for PlasmicWebDesignTool
    internalVariantProps: PlasmicWebDesignTool__VariantProps,
    internalArgProps: PlasmicWebDesignTool__ArgProps
  }
);

export default PlasmicWebDesignTool;
/* prettier-ignore-end */
