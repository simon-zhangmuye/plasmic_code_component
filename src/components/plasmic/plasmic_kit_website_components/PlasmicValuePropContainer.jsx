// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kjuFFTSZb8fanzCHT2C1jz
// Component: jJwXbiB2Ic
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import GraphicIcon from "../../GraphicIcon"; // plasmic-import: TcXkT68Mp6/component
import ButtonLink from "../../ButtonLink"; // plasmic-import: jzdXOPDUzV/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_plasmic_kit_website_components.module.css"; // plasmic-import: kjuFFTSZb8fanzCHT2C1jz/projectcss
import * as sty from "./PlasmicValuePropContainer.module.css"; // plasmic-import: jJwXbiB2Ic/css
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: Mj5CsVYcA9/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: j57_wDEs9S/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: wTfucAc7Rr/icon

export const PlasmicValuePropContainer__VariantProps = new Array("sections");

export const PlasmicValuePropContainer__ArgProps = new Array(
  "children",
  "slot",
  "slot2"
);

function PlasmicValuePropContainer__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"container32"}
      data-plasmic-override={overrides.container32}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.container32,
        {
          [sty.container32__sections_importTeal]: hasVariant(
            variants,
            "sections",
            "importTeal"
          )
        }
      )}
    >
      <GraphicIcon
        data-plasmic-name={"graphicIcon"}
        data-plasmic-override={overrides.graphicIcon}
        className={classNames("__wab_instance", sty.graphicIcon, {
          [sty.graphicIcon__sections_importTeal]: hasVariant(
            variants,
            "sections",
            "importTeal"
          )
        })}
        colors={
          hasVariant(variants, "sections", "importTeal") ? "teal" : undefined
        }
      >
        <p.PlasmicIcon
          PlasmicIconType={
            hasVariant(variants, "sections", "importTeal")
              ? Icon9Icon
              : Icon5Icon
          }
          className={classNames(defaultcss.all, sty.svg__tXdwi, {
            [sty.svg__sections_importTeal__tXdwi9PCxI]: hasVariant(
              variants,
              "sections",
              "importTeal"
            )
          })}
          role={"img"}
        />
      </GraphicIcon>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__wl33N)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__hlNmg)}
        >
          <div className={classNames(defaultcss.all, sty.box__c3Ngm)}>
            {p.renderPlasmicSlot({
              defaultContents: "Zero lock-in",
              value: args.children,
              className: classNames(sty.slotChildren)
            })}
          </div>

          <div className={classNames(defaultcss.all, sty.box__pZkQq)}>
            {p.renderPlasmicSlot({
              defaultContents: "You own everything you make in Plasmic.",
              value: args.slot,
              className: classNames(sty.slotSlot)
            })}
          </div>

          <div className={classNames(defaultcss.all, sty.box__veZia)}>
            {p.renderPlasmicSlot({
              defaultContents:
                "Check the React components into your git repository. Want to eject? Walk away any time with plain React code.",
              value: args.slot2,
              className: classNames(sty.slotSlot2)
            })}
          </div>
        </p.Stack>

        <ButtonLink
          data-plasmic-name={"buttonLink"}
          data-plasmic-override={overrides.buttonLink}
          className={classNames("__wab_instance", sty.buttonLink, {
            [sty.buttonLink__sections_importTeal]: hasVariant(
              variants,
              "sections",
              "importTeal"
            )
          })}
          icon={
            <IconIcon
              className={classNames(defaultcss.all, sty.svg__v37Z3)}
              role={"img"}
            />
          }
          label={"Learn more"}
          type={
            hasVariant(variants, "sections", "importTeal") ? ["rightIcon"] : []
          }
        />
      </p.Stack>

      <div
        className={classNames(defaultcss.all, sty.box__kIdlr, {
          [sty.box__sections_importTeal__kIdlr9PCxI]: hasVariant(
            variants,
            "sections",
            "importTeal"
          )
        })}
      />
    </p.Stack>
  );
}

const PlasmicDescendants = {
  container32: ["container32", "graphicIcon", "buttonLink"],
  graphicIcon: ["graphicIcon"],
  buttonLink: ["buttonLink"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicValuePropContainer__ArgProps,
      internalVariantPropNames: PlasmicValuePropContainer__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicValuePropContainer__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "container32") {
    func.displayName = "PlasmicValuePropContainer";
  } else {
    func.displayName = `PlasmicValuePropContainer.${nodeName}`;
  }
  return func;
}

export const PlasmicValuePropContainer = Object.assign(
  // Top-level PlasmicValuePropContainer renders the root element
  makeNodeComponent("container32"),
  {
    // Helper components rendering sub-elements
    graphicIcon: makeNodeComponent("graphicIcon"),
    buttonLink: makeNodeComponent("buttonLink"),
    // Metadata about props expected for PlasmicValuePropContainer
    internalVariantProps: PlasmicValuePropContainer__VariantProps,
    internalArgProps: PlasmicValuePropContainer__ArgProps
  }
);

export default PlasmicValuePropContainer;
/* prettier-ignore-end */
