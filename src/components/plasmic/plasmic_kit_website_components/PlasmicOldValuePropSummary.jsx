// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kjuFFTSZb8fanzCHT2C1jz
// Component: rBgbWjsA0sd
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: k7xdGnvUtPZ_s/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_plasmic_kit_website_components.module.css"; // plasmic-import: kjuFFTSZb8fanzCHT2C1jz/projectcss
import * as sty from "./PlasmicOldValuePropSummary.module.css"; // plasmic-import: rBgbWjsA0sd/css
import codePlasmicloaderXdyayxrS3 from "./images/codePlasmicloader.png"; // plasmic-import: XdyayxrS3/picture
import wwwPlasmicAppStudio62MuS6D2Y from "./images/wwwPlasmicAppStudio.png"; // plasmic-import: 62muS6d2Y/picture
import wwwPlasmicAppProdXNoAkG0E from "./images/wwwPlasmicAppProd.png"; // plasmic-import: xNo-AkG0e/picture

export const PlasmicOldValuePropSummary__VariantProps = new Array();

export const PlasmicOldValuePropSummary__ArgProps = new Array();

function PlasmicOldValuePropSummary__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box___6FT6B)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__aoice)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__eLSfQ
            )}
          >
            {"1. Integrate it in code."}
          </div>
        </p.Stack>

        <div className={classNames(defaultcss.all, sty.box__kfCj6)}>
          <img
            alt={""}
            className={classNames(defaultcss.img, sty.img___3Lai)}
            role={"img"}
            src={codePlasmicloaderXdyayxrS3}
          />
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__lY3Ju)}
      >
        <div className={classNames(defaultcss.all, sty.box__oAzHa)}>
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__oeA02
            )}
          >
            {"2. Edit your components."}
          </div>
        </div>

        <div className={classNames(defaultcss.all, sty.box__wtJo)}>
          <img
            alt={""}
            className={classNames(defaultcss.img, sty.img__t9WJu)}
            role={"img"}
            src={wwwPlasmicAppStudio62MuS6D2Y}
          />
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__vPm9)}
      >
        <div className={classNames(defaultcss.all, sty.box__moeu)}>
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__i1Pht
            )}
          >
            {"3. See it in production."}
          </div>
        </div>

        <div className={classNames(defaultcss.all, sty.box__vuRpx)}>
          <img
            alt={""}
            className={classNames(defaultcss.img, sty.img___3JmUr)}
            role={"img"}
            src={wwwPlasmicAppProdXNoAkG0E}
          />
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicOldValuePropSummary__ArgProps,
      internalVariantPropNames: PlasmicOldValuePropSummary__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicOldValuePropSummary__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOldValuePropSummary";
  } else {
    func.displayName = `PlasmicOldValuePropSummary.${nodeName}`;
  }
  return func;
}

export const PlasmicOldValuePropSummary = Object.assign(
  // Top-level PlasmicOldValuePropSummary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicOldValuePropSummary
    internalVariantProps: PlasmicOldValuePropSummary__VariantProps,
    internalArgProps: PlasmicOldValuePropSummary__ArgProps
  }
);

export default PlasmicOldValuePropSummary;
/* prettier-ignore-end */
