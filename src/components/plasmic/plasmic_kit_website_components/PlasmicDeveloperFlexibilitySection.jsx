// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kjuFFTSZb8fanzCHT2C1jz
// Component: aD1BzX0TEUk
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ValuePropsListSection from "../../ValuePropsListSection"; // plasmic-import: 2xJBbfTP-H7/component
import ValuePropListItem from "../../ValuePropListItem"; // plasmic-import: lJppbKgSOw/component
import GraphicIcon from "../../GraphicIcon"; // plasmic-import: TcXkT68Mp6/component
import Divider from "../../Divider"; // plasmic-import: SQHouqji3_/component
import ButtonLink from "../../ButtonLink"; // plasmic-import: jzdXOPDUzV/component
import { ThemeContext } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 9MzawQbD5r/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as sty from "./PlasmicDeveloperFlexibilitySection.module.css"; // plasmic-import: aD1BzX0TEUk/css
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: CyAK3Gjxwu/icon
import Icon27Icon from "./icons/PlasmicIcon__Icon27"; // plasmic-import: E2O_OGnBZf/icon
import Icon25Icon from "./icons/PlasmicIcon__Icon25"; // plasmic-import: gZDZDs61W-/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: f4GO4W3yZm/icon
import carbon1Png2INz8QmFvF from "./images/carbon1Png2.png"; // plasmic-import: INz8QmFvF/picture
import carbonpng3UrlN9Ysec from "./images/carbonpng3.png"; // plasmic-import: UrlN9ysec/picture

export const PlasmicDeveloperFlexibilitySection__VariantProps = new Array(
  "plasmicLoader"
);

export const PlasmicDeveloperFlexibilitySection__ArgProps = new Array();

function PlasmicDeveloperFlexibilitySection__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    theme: React.useContext(ThemeContext)
  });

  return (
    <ValuePropsListSection
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root, {
        [sty.root__plasmicLoader]: hasVariant(
          variants,
          "plasmicLoader",
          "plasmicLoader"
        )
      })}
      evenSplit={"evenSplit"}
      showcaseImage={
        <div className={classNames(defaultcss.all, sty.box__nVmFp)}>
          <img
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(defaultcss.img, sty.img, {
              [sty.img__plasmicLoader]: hasVariant(
                variants,
                "plasmicLoader",
                "plasmicLoader"
              )
            })}
            loading={"lazy"}
            role={"img"}
            src={
              hasVariant(variants, "plasmicLoader", "plasmicLoader")
                ? carbonpng3UrlN9Ysec
                : carbon1Png2INz8QmFvF
            }
          />
        </div>
      }
      slot={
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__boQLs,
            {
              [sty.box__global_theme_altHeadlineFont__boQLsFQkvX]: hasVariant(
                globalVariants,
                "theme",
                "altHeadlineFont"
              )
            }
          )}
        >
          <span>
            <span style={{ textDecoration: "underline" }}>
              {"No-compromise"}
            </span>
            <React.Fragment>{" developer control."}</React.Fragment>
          </span>
        </div>
      }
      slot2={null}
      slot3={
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box___8ZbOi)}
        >
          <ButtonLink
            href={"/learn/quickstart/"}
            icon={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__jop0M
                )}
              >
                {"->"}
              </div>
            }
            label={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__ow0I5
                )}
              >
                {"Developer quickstart"}
              </div>
            }
            type={["rightIcon", "pinkSolid"]}
          />

          {false ? (
            <a
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(defaultcss.all, sty.link)}
              href={""}
            >
              <ButtonLink
                icon={
                  <Icon8Icon
                    className={classNames(defaultcss.all, sty.svg__aMyDm)}
                    role={"img"}
                  />
                }
                label={"Learn about the CMS API "}
                type={["rightIcon", "pinkSolid"]}
              />
            </a>
          ) : null}
        </p.Stack>
      }
    >
      <ValuePropListItem
        slot={
          <GraphicIcon
            className={classNames("__wab_instance", sty.graphicIcon__wUah9)}
            colors={"lightPinkSolid"}
          >
            <Icon13Icon
              className={classNames(defaultcss.all, sty.svg___0Fc0K)}
              role={"img"}
            />
          </GraphicIcon>
        }
        slot2={"Designed to work with code."}
      >
        <span>
          <React.Fragment>
            {
              "Override anything. Extend with state and behavior. The only WYSIWYG builder that "
            }
          </React.Fragment>
          <span style={{ fontWeight: 700 }}>{"never limits you"}</span>
          <React.Fragment>{"."}</React.Fragment>
        </span>
      </ValuePropListItem>

      <Divider className={classNames("__wab_instance", sty.divider__z6XtX)} />

      <ValuePropListItem
        slot={
          <GraphicIcon
            className={classNames("__wab_instance", sty.graphicIcon__iHoR)}
            colors={"lightPinkSolid"}
          >
            <Icon27Icon
              className={classNames(defaultcss.all, sty.svg___0BseX)}
              role={"img"}
            />
          </GraphicIcon>
        }
        slot2={"Blazing speed."}
      >
        {
          "Static build support. Image and asset optimization. Web Vitals best practices. And much more."
        }
      </ValuePropListItem>

      <Divider className={classNames("__wab_instance", sty.divider__oVnLw)} />

      <ValuePropListItem
        slot={
          <GraphicIcon
            className={classNames("__wab_instance", sty.graphicIcon__eKrs)}
            colors={"lightPinkSolid"}
          >
            <Icon25Icon
              className={classNames(defaultcss.all, sty.svg__vlVjI)}
              role={"img"}
            />
          </GraphicIcon>
        }
        slot2={"Zero lock-in."}
      >
        {
          "Switch codegen modes to eject with clean, modern React code any time."
        }
      </ValuePropListItem>
    </ValuePropsListSection>
  );
}

const PlasmicDescendants = {
  root: ["root", "link", "img"],
  link: ["link"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDeveloperFlexibilitySection__ArgProps,
      internalVariantPropNames: PlasmicDeveloperFlexibilitySection__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicDeveloperFlexibilitySection__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDeveloperFlexibilitySection";
  } else {
    func.displayName = `PlasmicDeveloperFlexibilitySection.${nodeName}`;
  }
  return func;
}

export const PlasmicDeveloperFlexibilitySection = Object.assign(
  // Top-level PlasmicDeveloperFlexibilitySection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicDeveloperFlexibilitySection
    internalVariantProps: PlasmicDeveloperFlexibilitySection__VariantProps,
    internalArgProps: PlasmicDeveloperFlexibilitySection__ArgProps
  }
);

export default PlasmicDeveloperFlexibilitySection;
/* prettier-ignore-end */
