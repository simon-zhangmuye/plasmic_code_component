// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kjuFFTSZb8fanzCHT2C1jz
// Component: qSazSuRq3D
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: k7xdGnvUtPZ_s/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_plasmic_kit_website_components.module.css"; // plasmic-import: kjuFFTSZb8fanzCHT2C1jz/projectcss
import * as sty from "./PlasmicValuePropCard.module.css"; // plasmic-import: qSazSuRq3D/css
import codePlasmicloaderXdyayxrS3 from "./images/codePlasmicloader.png"; // plasmic-import: XdyayxrS3/picture

export const PlasmicValuePropCard__VariantProps = new Array();

export const PlasmicValuePropCard__ArgProps = new Array(
  "descrip",
  "children",
  "num",
  "img"
);

function PlasmicValuePropCard__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__rQgFt)}
      >
        <div className={classNames(defaultcss.all, sty.box__b4ZQy)}>
          {p.renderPlasmicSlot({
            defaultContents: null,
            value: args.children
          })}

          {p.renderPlasmicSlot({
            defaultContents: "1",
            value: args.num,
            className: classNames(sty.slotNum)
          })}
        </div>

        {p.renderPlasmicSlot({
          defaultContents: "Integrate into your code.",
          value: args.descrip,
          className: classNames(sty.slotDescrip)
        })}
      </p.Stack>

      <div className={classNames(defaultcss.all, sty.box__i2R93)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__efqk)}
              role={"img"}
              src={codePlasmicloaderXdyayxrS3}
            />
          ),

          value: args.img
        })}
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicValuePropCard__ArgProps,
      internalVariantPropNames: PlasmicValuePropCard__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicValuePropCard__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicValuePropCard";
  } else {
    func.displayName = `PlasmicValuePropCard.${nodeName}`;
  }
  return func;
}

export const PlasmicValuePropCard = Object.assign(
  // Top-level PlasmicValuePropCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicValuePropCard
    internalVariantProps: PlasmicValuePropCard__VariantProps,
    internalArgProps: PlasmicValuePropCard__ArgProps
  }
);

export default PlasmicValuePropCard;
/* prettier-ignore-end */
