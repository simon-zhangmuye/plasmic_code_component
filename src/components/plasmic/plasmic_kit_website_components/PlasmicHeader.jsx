// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kjuFFTSZb8fanzCHT2C1jz
// Component: vtgKf8zu4R
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Logo from "../../Logo"; // plasmic-import: LC6N8oPz6C/component
import Linky from "../../Linky"; // plasmic-import: EDH0JqEGKc/component
import ButtonLink from "../../ButtonLink"; // plasmic-import: jzdXOPDUzV/component
import { ThemeContext } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 9MzawQbD5r/globalVariant
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: k7xdGnvUtPZ_s/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_plasmic_kit_website_components.module.css"; // plasmic-import: kjuFFTSZb8fanzCHT2C1jz/projectcss
import * as sty from "./PlasmicHeader.module.css"; // plasmic-import: vtgKf8zu4R/css
import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: T8joG3yRTH/icon
import Icon33Icon from "./icons/PlasmicIcon__Icon33"; // plasmic-import: bXLmcsbn-z/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: wTfucAc7Rr/icon

export const PlasmicHeader__VariantProps = new Array("showMobileMenu");

export const PlasmicHeader__ArgProps = new Array();

function PlasmicHeader__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    theme: React.useContext(ThemeContext),
    screen: useScreenVariants()
  });

  return (
    <section
      data-plasmic-name={"section"}
      data-plasmic-override={overrides.section}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.section,
        {
          [sty.section__global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),

          [sty.section__showMobileMenu]: hasVariant(
            variants,
            "showMobileMenu",
            "showMobileMenu"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"container"}
        data-plasmic-override={overrides.container}
        className={classNames(defaultcss.all, sty.container, {
          [sty.container__global_theme_dark]: hasVariant(
            globalVariants,
            "theme",
            "dark"
          ),

          [sty.container__showMobileMenu]: hasVariant(
            variants,
            "showMobileMenu",
            "showMobileMenu"
          )
        })}
      >
        <Logo
          data-plasmic-name={"logo"}
          data-plasmic-override={overrides.logo}
          className={classNames("__wab_instance", sty.logo, {
            [sty.logo__global_theme_dark]: hasVariant(
              globalVariants,
              "theme",
              "dark"
            ),

            [sty.logo__showMobileMenu]: hasVariant(
              variants,
              "showMobileMenu",
              "showMobileMenu"
            )
          })}
        />

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__kb5Q9, {
            [sty.box__showMobileMenu__kb5Q9FYx6G]: hasVariant(
              variants,
              "showMobileMenu",
              "showMobileMenu"
            )
          })}
        >
          {(
            hasVariant(globalVariants, "screen", "mobilePortrait")
              ? false
              : false
          ) ? (
            <Linky
              className={classNames("__wab_instance", sty.linky__mccmK, {
                [sty.linky__global_theme_dark__mccmKh5AZc]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              })}
              link={"/features"}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__hHwpX,
                  {
                    [sty.box__global_theme_dark__hHwpXh5AZc]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  }
                )}
              >
                {"Features"}
              </div>
            </Linky>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobilePortrait")
              ? false
              : false
          ) ? (
            <Linky>{"Use Cases"}</Linky>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobilePortrait")
              ? false
              : true
          ) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__gQ38)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? false
                  : true
              ) ? (
                <Linky
                  className={classNames("__wab_instance", sty.linky__msqCp, {
                    [sty.linky__showMobileMenu__msqCpfYx6G]: hasVariant(
                      variants,
                      "showMobileMenu",
                      "showMobileMenu"
                    )
                  })}
                  link={"https://twitter.com/plasmicapp"}
                >
                  <Icon34Icon
                    className={classNames(defaultcss.all, sty.svg__rvDJc)}
                    role={"img"}
                  />
                </Linky>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? false
                  : true
              ) ? (
                <Linky
                  className={classNames("__wab_instance", sty.linky__m9Lw2)}
                  link={"https://github.com/plasmicapp/plasmic"}
                >
                  <Icon33Icon
                    className={classNames(defaultcss.all, sty.svg__tl5V9)}
                    role={"img"}
                  />
                </Linky>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? false
                  : true
              ) ? (
                <Linky link={"/learn/"}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box___7E5B0
                    )}
                  >
                    {"Learn"}
                  </div>
                </Linky>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobilePortrait")
                  ? false
                  : true
              ) ? (
                <Linky link={"/pricing"}>{"Pricing"}</Linky>
              ) : null}
            </p.Stack>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobilePortrait")
              ? true
              : false
          ) ? (
            <ButtonLink
              data-plasmic-name={"hamburgerMenu"}
              data-plasmic-override={overrides.hamburgerMenu}
              className={classNames("__wab_instance", sty.hamburgerMenu, {
                [sty.hamburgerMenu__global_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                ),

                [sty.hamburgerMenu__showMobileMenu]: hasVariant(
                  variants,
                  "showMobileMenu",
                  "showMobileMenu"
                )
              })}
              icon={
                <IconIcon
                  className={classNames(defaultcss.all, sty.svg__rgliQ, {
                    [sty.svg__global_theme_dark__rgliQh5AZc]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  })}
                  role={"img"}
                />
              }
              label={"Log in"}
              type={["iconOnly"]}
            />
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobilePortrait") ? true : true
          ) ? (
            <ButtonLink
              data-plasmic-name={"loginButton"}
              data-plasmic-override={overrides.loginButton}
              href={"https://plasmic.app/login"}
              icon={
                <IconIcon
                  className={classNames(defaultcss.all, sty.svg__wIkM)}
                  role={"img"}
                />
              }
              label={"Sign in"}
              type={[]}
            />
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobilePortrait") ? true : true
          ) ? (
            <ButtonLink
              data-plasmic-name={"signupButton"}
              data-plasmic-override={overrides.signupButton}
              className={classNames("__wab_instance", sty.signupButton, {
                [sty.signupButton__global_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              })}
              href={"https://plasmic.app/signup"}
              icon={
                <IconIcon
                  className={classNames(defaultcss.all, sty.svg__mNkUj)}
                  role={"img"}
                />
              }
              label={"Sign up for free"}
              type={["cyanSolid"]}
            />
          ) : null}
        </p.Stack>
      </div>

      {(
        hasVariant(variants, "showMobileMenu", "showMobileMenu") ? true : false
      ) ? (
        <div
          data-plasmic-name={"mobileNav"}
          data-plasmic-override={overrides.mobileNav}
          className={classNames(defaultcss.all, sty.mobileNav, {
            [sty.mobileNav__showMobileMenu]: hasVariant(
              variants,
              "showMobileMenu",
              "showMobileMenu"
            )
          })}
        >
          {(
            hasVariant(variants, "showMobileMenu", "showMobileMenu")
              ? false
              : true
          ) ? (
            <Linky
              className={classNames("__wab_instance", sty.linky__zyzAx, {
                [sty.linky__showMobileMenu__zyzAxfYx6G]: hasVariant(
                  variants,
                  "showMobileMenu",
                  "showMobileMenu"
                )
              })}
              leftAligned={"leftAligned"}
              link={
                hasVariant(variants, "showMobileMenu", "showMobileMenu")
                  ? "/#features"
                  : undefined
              }
            >
              {"Features"}
            </Linky>
          ) : null}

          <Linky
            className={classNames("__wab_instance", sty.linky__ueb7Y, {
              [sty.linky__showMobileMenu__ueb7YfYx6G]: hasVariant(
                variants,
                "showMobileMenu",
                "showMobileMenu"
              )
            })}
            leftAligned={"leftAligned"}
            link={
              hasVariant(variants, "showMobileMenu", "showMobileMenu")
                ? "/learn/"
                : undefined
            }
          >
            {"Learn"}
          </Linky>

          {(
            hasVariant(globalVariants, "screen", "mobilePortrait")
              ? false
              : true
          ) ? (
            <Linky
              className={classNames("__wab_instance", sty.linky__gdiBd)}
              link={"/learn/"}
            >
              <Icon33Icon
                className={classNames(defaultcss.all, sty.svg__uq7Vc)}
                role={"img"}
              />
            </Linky>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobilePortrait")
              ? false
              : true
          ) ? (
            <Linky
              className={classNames("__wab_instance", sty.linky__g5Thv)}
              link={"/learn/"}
            >
              <Icon33Icon
                className={classNames(defaultcss.all, sty.svg__ofvaL)}
                role={"img"}
              />
            </Linky>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobilePortrait")
              ? false
              : true
          ) ? (
            <Linky
              className={classNames("__wab_instance", sty.linky___1GmQ8)}
              link={"/learn/"}
            >
              <Icon33Icon
                className={classNames(defaultcss.all, sty.svg__dDlJj)}
                role={"img"}
              />
            </Linky>
          ) : null}

          <Linky
            className={classNames("__wab_instance", sty.linky__in5W3, {
              [sty.linky__showMobileMenu__in5W3FYx6G]: hasVariant(
                variants,
                "showMobileMenu",
                "showMobileMenu"
              )
            })}
            leftAligned={"leftAligned"}
            link={
              hasVariant(variants, "showMobileMenu", "showMobileMenu")
                ? "/pricing/"
                : undefined
            }
          >
            {"Pricing"}
          </Linky>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__szH3A)}
          >
            {(
              hasVariant(globalVariants, "screen", "mobilePortrait")
                ? true
                : true
            ) ? (
              <ButtonLink
                data-plasmic-name={"loginButton2"}
                data-plasmic-override={overrides.loginButton2}
                href={
                  hasVariant(variants, "showMobileMenu", "showMobileMenu")
                    ? "https://studio.plasmic.app/"
                    : undefined
                }
                icon={
                  <IconIcon
                    className={classNames(defaultcss.all, sty.svg__min8F)}
                    role={"img"}
                  />
                }
                label={"Sign in"}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobilePortrait")
                ? true
                : true
            ) ? (
              <ButtonLink
                data-plasmic-name={"signupButton2"}
                data-plasmic-override={overrides.signupButton2}
                href={
                  hasVariant(variants, "showMobileMenu", "showMobileMenu")
                    ? "https://studio.plasmic.app/"
                    : undefined
                }
                icon={
                  <IconIcon
                    className={classNames(defaultcss.all, sty.svg__dX7R)}
                    role={"img"}
                  />
                }
                label={"Sign up for free"}
                type={["purpleSolid"]}
              />
            ) : null}
          </p.Stack>

          <div className={classNames(defaultcss.all, sty.box__ihjf3)}>
            <Linky
              className={classNames("__wab_instance", sty.linky__mUYaP)}
              link={"https://twitter.com/plasmicapp"}
            >
              <Icon34Icon
                className={classNames(defaultcss.all, sty.svg__vRxpn)}
                role={"img"}
              />
            </Linky>

            {true ? (
              <Linky link={"https://github.com/plasmicapp/plasmic"}>
                <Icon33Icon
                  className={classNames(defaultcss.all, sty.svg__hcjwZ)}
                  role={"img"}
                />
              </Linky>
            ) : null}
          </div>
        </div>
      ) : null}
    </section>
  );
}

const PlasmicDescendants = {
  section: [
    "section",
    "container",
    "logo",
    "hamburgerMenu",
    "loginButton",
    "signupButton",
    "mobileNav",
    "loginButton2",
    "signupButton2"
  ],

  container: [
    "container",
    "logo",
    "hamburgerMenu",
    "loginButton",
    "signupButton"
  ],

  logo: ["logo"],
  hamburgerMenu: ["hamburgerMenu"],
  loginButton: ["loginButton"],
  signupButton: ["signupButton"],
  mobileNav: ["mobileNav", "loginButton2", "signupButton2"],
  loginButton2: ["loginButton2"],
  signupButton2: ["signupButton2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeader__ArgProps,
      internalVariantPropNames: PlasmicHeader__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "section") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("section"),
  {
    // Helper components rendering sub-elements
    container: makeNodeComponent("container"),
    logo: makeNodeComponent("logo"),
    hamburgerMenu: makeNodeComponent("hamburgerMenu"),
    loginButton: makeNodeComponent("loginButton"),
    signupButton: makeNodeComponent("signupButton"),
    mobileNav: makeNodeComponent("mobileNav"),
    loginButton2: makeNodeComponent("loginButton2"),
    signupButton2: makeNodeComponent("signupButton2"),
    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
