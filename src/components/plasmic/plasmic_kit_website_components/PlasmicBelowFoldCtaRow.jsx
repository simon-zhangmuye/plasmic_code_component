// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kjuFFTSZb8fanzCHT2C1jz
// Component: JF4MWU3g67-
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ButtonLink from "../../ButtonLink"; // plasmic-import: jzdXOPDUzV/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_plasmic_kit_website_components.module.css"; // plasmic-import: kjuFFTSZb8fanzCHT2C1jz/projectcss
import * as sty from "./PlasmicBelowFoldCtaRow.module.css"; // plasmic-import: JF4MWU3g67-/css
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: wTfucAc7Rr/icon
import image42QIfl4Twq0H from "./images/image42.svg"; // plasmic-import: QIfl4TWQ0H/picture

export const PlasmicBelowFoldCtaRow__VariantProps = new Array("hideLevels");

export const PlasmicBelowFoldCtaRow__ArgProps = new Array();

function PlasmicBelowFoldCtaRow__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__hideLevels]: hasVariant(variants, "hideLevels", "hideLevels")
      })}
    >
      <ButtonLink
        className={classNames("__wab_instance", sty.buttonLink__rF8T1)}
        href={"https://plasmic.app/signup"}
        icon={
          <IconIcon
            className={classNames(defaultcss.all, sty.svg__fp7Xm)}
            role={"img"}
          />
        }
        label={
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__k9D7E
            )}
          >
            {"Try Plasmic for free"}
          </div>
        }
        type={["purpleSolid"]}
      />

      {(hasVariant(variants, "hideLevels", "hideLevels") ? false : true) ? (
        <ButtonLink
          className={classNames("__wab_instance", sty.buttonLink__wOvzn, {
            [sty.buttonLink__hideLevels__wOvznzrlR9]: hasVariant(
              variants,
              "hideLevels",
              "hideLevels"
            )
          })}
          href={"https://studio.plasmic.app/starters/game"}
          icon={
            <IconIcon
              className={classNames(defaultcss.all, sty.svg__zuYzv)}
              role={"img"}
            />
          }
          label={
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box___0MOFa)}
            >
              <img
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(defaultcss.img, sty.img)}
                role={"img"}
                src={image42QIfl4Twq0H}
              />

              <div className={classNames(defaultcss.all, sty.box__mDfeL)}>
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__dfsSm
                  )}
                >
                  {"Play "}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__fJluv
                  )}
                >
                  {"Plasmic Levels"}
                </div>
              </div>
            </p.Stack>
          }
          type={["purpleOutline"]}
        />
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBelowFoldCtaRow__ArgProps,
      internalVariantPropNames: PlasmicBelowFoldCtaRow__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicBelowFoldCtaRow__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBelowFoldCtaRow";
  } else {
    func.displayName = `PlasmicBelowFoldCtaRow.${nodeName}`;
  }
  return func;
}

export const PlasmicBelowFoldCtaRow = Object.assign(
  // Top-level PlasmicBelowFoldCtaRow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicBelowFoldCtaRow
    internalVariantProps: PlasmicBelowFoldCtaRow__VariantProps,
    internalArgProps: PlasmicBelowFoldCtaRow__ArgProps
  }
);

export default PlasmicBelowFoldCtaRow;
/* prettier-ignore-end */
