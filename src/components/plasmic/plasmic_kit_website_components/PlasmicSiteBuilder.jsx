// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kjuFFTSZb8fanzCHT2C1jz
// Component: jlcB8VeL6C_
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import CommonLandingPage from "../../CommonLandingPage"; // plasmic-import: HzhMCW_ztWQ/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_plasmic_kit_website_components.module.css"; // plasmic-import: kjuFFTSZb8fanzCHT2C1jz/projectcss
import * as sty from "./PlasmicSiteBuilder.module.css"; // plasmic-import: jlcB8VeL6C_/css

export const PlasmicSiteBuilder__VariantProps = new Array();

export const PlasmicSiteBuilder__ArgProps = new Array();

function PlasmicSiteBuilder__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <React.Fragment>
      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <CommonLandingPage
            data-plasmic-name={"commonLandingPage"}
            data-plasmic-override={overrides.commonLandingPage}
            className={classNames("__wab_instance", sty.commonLandingPage)}
            slot={"The website builder that never limits you."}
            slot2={
              "Finallyâ€”a powerful, no-code WYSIWYG builder that is open-architecture, integrates with arbitrary code, never locks you in, and scales to the most complex requirements."
            }
          >
            <div
              data-plasmic-name={"box"}
              data-plasmic-override={overrides.box}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box
              )}
            >
              {"Make your site editable to the whole team."}
            </div>
          </CommonLandingPage>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "commonLandingPage", "box"],
  commonLandingPage: ["commonLandingPage", "box"],
  box: ["box"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSiteBuilder__ArgProps,
      internalVariantPropNames: PlasmicSiteBuilder__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicSiteBuilder__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSiteBuilder";
  } else {
    func.displayName = `PlasmicSiteBuilder.${nodeName}`;
  }
  return func;
}

export const PlasmicSiteBuilder = Object.assign(
  // Top-level PlasmicSiteBuilder renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    commonLandingPage: makeNodeComponent("commonLandingPage"),
    box: makeNodeComponent("box"),
    // Metadata about props expected for PlasmicSiteBuilder
    internalVariantProps: PlasmicSiteBuilder__VariantProps,
    internalArgProps: PlasmicSiteBuilder__ArgProps
  }
);

export default PlasmicSiteBuilder;
/* prettier-ignore-end */
