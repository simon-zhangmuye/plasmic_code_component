// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kjuFFTSZb8fanzCHT2C1jz
// Component: lJppbKgSOw
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import GraphicIcon from "../../GraphicIcon"; // plasmic-import: TcXkT68Mp6/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_plasmic_kit_website_components.module.css"; // plasmic-import: kjuFFTSZb8fanzCHT2C1jz/projectcss
import * as sty from "./PlasmicValuePropListItem.module.css"; // plasmic-import: lJppbKgSOw/css
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: oElPELm1et/icon

export const PlasmicValuePropListItem__VariantProps = new Array();

export const PlasmicValuePropListItem__ArgProps = new Array(
  "children",
  "slot",
  "slot2"
);

function PlasmicValuePropListItem__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <GraphicIcon
            className={classNames("__wab_instance", sty.graphicIcon__sjZct)}
            colors={"teal"}
          >
            <Icon17Icon
              className={classNames(defaultcss.all, sty.svg__nf3W)}
              role={"img"}
            />
          </GraphicIcon>
        ),

        value: args.slot
      })}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__vEe6Y)}
      >
        <div className={classNames(defaultcss.all, sty.box__o5Hv)}>
          <div className={classNames(defaultcss.all, sty.box__rp92I)}>
            {p.renderPlasmicSlot({
              defaultContents: "This is a header.",
              value: args.slot2,
              className: classNames(sty.slotSlot2)
            })}
          </div>
        </div>

        {p.renderPlasmicSlot({
          defaultContents:
            "Enable non-developers to publish pages and free-form content. For when CMS schemas and templates can't keep up.",
          value: args.children,
          className: classNames(sty.slotChildren)
        })}
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicValuePropListItem__ArgProps,
      internalVariantPropNames: PlasmicValuePropListItem__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicValuePropListItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicValuePropListItem";
  } else {
    func.displayName = `PlasmicValuePropListItem.${nodeName}`;
  }
  return func;
}

export const PlasmicValuePropListItem = Object.assign(
  // Top-level PlasmicValuePropListItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicValuePropListItem
    internalVariantProps: PlasmicValuePropListItem__VariantProps,
    internalArgProps: PlasmicValuePropListItem__ArgProps
  }
);

export default PlasmicValuePropListItem;
/* prettier-ignore-end */
