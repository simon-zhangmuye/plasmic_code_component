// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kjuFFTSZb8fanzCHT2C1jz
// Component: SuPOJLymtk7
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CommonLandingPage from "../../CommonLandingPage"; // plasmic-import: HzhMCW_ztWQ/component
import ValuePropListItem from "../../ValuePropListItem"; // plasmic-import: lJppbKgSOw/component
import GraphicIcon from "../../GraphicIcon"; // plasmic-import: TcXkT68Mp6/component
import Divider from "../../Divider"; // plasmic-import: SQHouqji3_/component
import { ThemeContext } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 9MzawQbD5r/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_plasmic_kit_website_components.module.css"; // plasmic-import: kjuFFTSZb8fanzCHT2C1jz/projectcss
import * as sty from "./PlasmicNextjsBuilder.module.css"; // plasmic-import: SuPOJLymtk7/css
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: d8TOpAp1CP/icon
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: YhhYiXTtXT/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: 5amV9exkN9/icon

export const PlasmicNextjsBuilder__VariantProps = new Array();

export const PlasmicNextjsBuilder__ArgProps = new Array();

function PlasmicNextjsBuilder__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    theme: React.useContext(ThemeContext)
  });

  return (
    <React.Fragment>
      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root,
            {
              [sty.root__global_theme_altHeadlineFont]: hasVariant(
                globalVariants,
                "theme",
                "altHeadlineFont"
              ),

              [sty.root__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            }
          )}
        >
          <CommonLandingPage
            data-plasmic-name={"commonLandingPage"}
            data-plasmic-override={overrides.commonLandingPage}
            className={classNames("__wab_instance", sty.commonLandingPage)}
            nextjs={"nextjs"}
            slot={"The next-generation\npage builder for Next.js"}
            slot2={
              <span>
                <span style={{ fontWeight: 700 }}>{"Unblock your team"}</span>
                <React.Fragment>
                  {
                    ". Empower anyone to design and ship content lightning-fast for your Next.js codebase."
                  }
                </React.Fragment>
              </span>
            }
            slot3={
              "Starting on something new? Generate a complete Next.js codebase from scratch. Start a GitHub repo straight from within Plasmic, or run the create-plasmic-app CLI."
            }
            slot4={
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__jgCiM)}
              >
                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__c98Dk
                      )}
                      colors={"lightBlueSolid"}
                    >
                      <Icon21Icon
                        className={classNames(defaultcss.all, sty.svg__noKqG)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"No-code autonomy."}
                />

                <Divider
                  className={classNames("__wab_instance", sty.divider__aLXx7)}
                />

                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__kEvmH
                      )}
                      colors={"lightBlueSolid"}
                    >
                      <Icon20Icon
                        className={classNames(defaultcss.all, sty.svg__wrDy)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"Free up developers."}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__wMsGr
                    )}
                  >
                    {
                      "Let developers focus on code, not pixel-pushing. Or use Plasmic to accelerate frontend development."
                    }
                  </div>
                </ValuePropListItem>

                <Divider
                  className={classNames("__wab_instance", sty.divider__x23VP)}
                />

                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__ymDns
                      )}
                      colors={"lightBlueSolid"}
                    >
                      <Icon22Icon
                        className={classNames(defaultcss.all, sty.svg__mKopd)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"Eliminate handoffs."}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__j5Ugo
                    )}
                  >
                    {
                      "Keep everyone on the same page, with a single source of truth for design and production."
                    }
                  </div>
                </ValuePropListItem>
              </p.Stack>
            }
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__wpcAg
              )}
            >
              {"Make your Next.js site editable to the whole team."}
            </div>
          </CommonLandingPage>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "commonLandingPage"],
  commonLandingPage: ["commonLandingPage"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNextjsBuilder__ArgProps,
      internalVariantPropNames: PlasmicNextjsBuilder__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicNextjsBuilder__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNextjsBuilder";
  } else {
    func.displayName = `PlasmicNextjsBuilder.${nodeName}`;
  }
  return func;
}

export const PlasmicNextjsBuilder = Object.assign(
  // Top-level PlasmicNextjsBuilder renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    commonLandingPage: makeNodeComponent("commonLandingPage"),
    // Metadata about props expected for PlasmicNextjsBuilder
    internalVariantProps: PlasmicNextjsBuilder__VariantProps,
    internalArgProps: PlasmicNextjsBuilder__ArgProps
  }
);

export default PlasmicNextjsBuilder;
/* prettier-ignore-end */
