// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kjuFFTSZb8fanzCHT2C1jz
// Component: 2xJBbfTP-H7
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ValuePropListItem from "../../ValuePropListItem"; // plasmic-import: lJppbKgSOw/component
import GraphicIcon from "../../GraphicIcon"; // plasmic-import: TcXkT68Mp6/component
import Divider from "../../Divider"; // plasmic-import: SQHouqji3_/component
import ButtonLink from "../../ButtonLink"; // plasmic-import: jzdXOPDUzV/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: k7xdGnvUtPZ_s/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_plasmic_kit_website_components.module.css"; // plasmic-import: kjuFFTSZb8fanzCHT2C1jz/projectcss
import * as sty from "./PlasmicValuePropsListSection.module.css"; // plasmic-import: 2xJBbfTP-H7/css
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: oElPELm1et/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: wTfucAc7Rr/icon
import carbon4PngMZuhoXmN from "./images/carbon4Png.png"; // plasmic-import: mZuhoXM_N/picture
import carbonpngQ8DsR1Ya3 from "./images/carbonpng.png"; // plasmic-import: Q8dsR1Ya3/picture

export const PlasmicValuePropsListSection__VariantProps = new Array(
  "evenSplit"
);

export const PlasmicValuePropsListSection__ArgProps = new Array(
  "children",
  "slot",
  "slot2",
  "slot3",
  "showcaseImage"
);

function PlasmicValuePropsListSection__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.box__sTac9)}>
        {p.renderPlasmicSlot({
          defaultContents: "Make your product editable to anyone.",
          value: args.slot,
          className: classNames(sty.slotSlot)
        })}
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__hIgK, {
          [sty.box__evenSplit__hIgKNubwn]: hasVariant(
            variants,
            "evenSplit",
            "evenSplit"
          )
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"container"}
          data-plasmic-override={overrides.container}
          hasGap={true}
          className={classNames(defaultcss.all, sty.container, {
            [sty.container__evenSplit]: hasVariant(
              variants,
              "evenSplit",
              "evenSplit"
            )
          })}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box___2Dl5S)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box___0CTpv)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <React.Fragment>
                    <ValuePropListItem
                      slot={
                        <GraphicIcon
                          className={classNames(
                            "__wab_instance",
                            sty.graphicIcon__mXukX
                          )}
                          colors={"teal"}
                        >
                          <Icon17Icon
                            className={classNames(
                              defaultcss.all,
                              sty.svg___13MnX
                            )}
                            role={"img"}
                          />
                        </GraphicIcon>
                      }
                    >
                      {
                        "Whether youâ€™re a developer, designer, or content creative, Plasmic Studio scales to your desired level of control."
                      }
                    </ValuePropListItem>

                    <Divider
                      className={classNames(
                        "__wab_instance",
                        sty.divider__oXnNx
                      )}
                    />

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.box__e7JFe)}
                    >
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon__a30SO
                        )}
                        colors={"teal"}
                      >
                        <Icon17Icon
                          className={classNames(defaultcss.all, sty.svg__hNpS8)}
                          role={"img"}
                        />
                      </GraphicIcon>

                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.box__oLm8P
                        )}
                      >
                        {
                          "Free up developers and iterate faster. Or accelerate your own development cycles."
                        }
                      </div>
                    </p.Stack>

                    <Divider
                      className={classNames(
                        "__wab_instance",
                        sty.divider__mWeZp
                      )}
                    />

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.box__is60X)}
                    >
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon__ebzBe
                        )}
                        colors={"teal"}
                      >
                        <Icon17Icon
                          className={classNames(defaultcss.all, sty.svg__x81Vx)}
                          role={"img"}
                        />
                      </GraphicIcon>

                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.box__xEv57
                        )}
                      >
                        {
                          "Keep everyone on the same page, with a single source of truth for design and production."
                        }
                      </div>
                    </p.Stack>
                  </React.Fragment>
                ),

                value: args.children
              })}
            </p.Stack>

            {p.renderPlasmicSlot({
              defaultContents: null,
              value: args.slot2
            })}
          </p.Stack>

          {p.renderPlasmicSlot({
            defaultContents: (
              <ButtonLink
                className={classNames("__wab_instance", sty.buttonLink__fFeGa)}
                icon={
                  <IconIcon
                    className={classNames(defaultcss.all, sty.svg__ix2FQ)}
                    role={"img"}
                  />
                }
                label={"Watch an overview of Plasmic Studio"}
              />
            ),

            value: args.slot3
          })}
        </p.Stack>

        {false ? (
          <div className={classNames(defaultcss.all, sty.box__m8FK)}>
            <div className={classNames(defaultcss.all, sty.box__lsKij)}>
              <img
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(defaultcss.img, sty.img)}
                role={"img"}
                src={carbon4PngMZuhoXmN}
              />
            </div>
          </div>
        ) : null}

        <div
          className={classNames(defaultcss.all, sty.box__cQYiv, {
            [sty.box__evenSplit__cQYivNubwn]: hasVariant(
              variants,
              "evenSplit",
              "evenSplit"
            )
          })}
        >
          <div className={classNames(defaultcss.all, sty.box__nsS5V)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img__s6UrP)}
                  role={"img"}
                  src={carbonpngQ8DsR1Ya3}
                />
              ),

              value: args.showcaseImage
            })}
          </div>
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "container", "img"],
  container: ["container"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicValuePropsListSection__ArgProps,
      internalVariantPropNames: PlasmicValuePropsListSection__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicValuePropsListSection__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicValuePropsListSection";
  } else {
    func.displayName = `PlasmicValuePropsListSection.${nodeName}`;
  }
  return func;
}

export const PlasmicValuePropsListSection = Object.assign(
  // Top-level PlasmicValuePropsListSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    container: makeNodeComponent("container"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicValuePropsListSection
    internalVariantProps: PlasmicValuePropsListSection__VariantProps,
    internalArgProps: PlasmicValuePropsListSection__ArgProps
  }
);

export default PlasmicValuePropsListSection;
/* prettier-ignore-end */
