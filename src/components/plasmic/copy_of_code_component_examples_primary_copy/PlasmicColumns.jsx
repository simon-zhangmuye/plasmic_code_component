// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: HxsWCzVvbgXkQCjLyd31a
// Component: lsbXSt7-O8kLKs
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ListItem from "../../ListItem"; // plasmic-import: J4ZNq7WgHUkyU/component
import YouTube from "react-youtube"; // plasmic-import: cKFZpge-rl5Qb/codeComponent
import { GoogleMap } from "@react-google-maps/api"; // plasmic-import: nOIBXvCNMyZ4j/codeComponent
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: yFEq2EtBpCba_N/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_code_component_examples_primary_copy.module.css"; // plasmic-import: HxsWCzVvbgXkQCjLyd31a/projectcss
import * as sty from "./PlasmicColumns.module.css"; // plasmic-import: lsbXSt7-O8kLKs/css

export const PlasmicColumns__VariantProps = new Array("centered");

export const PlasmicColumns__ArgProps = new Array("children", "slot");

function PlasmicColumns__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__centered]: hasVariant(variants, "centered", "centered")
      })}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <ListItem
            _package={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__taUfc
                )}
              >
                {"react-youtube"}
              </div>
            }
            title={"Youtube"}
          >
            <YouTube
              className={classNames("__wab_instance", sty.youTube__m0XZn)}
              videoId={"R6MeLqRQzYw"}
            />
          </ListItem>
        ),

        value: args.children
      })}

      {p.renderPlasmicSlot({
        defaultContents: (
          <ListItem
            _package={"@react-google-maps/api"}
            className={classNames("__wab_instance", sty.listItem___4NABd)}
            title={"Google Maps"}
          >
            <GoogleMap
              center={{ lat: -5, lng: -40 }}
              mapContainerClassName={classNames(
                "__wab_instance",
                sty.map__xsriJ
              )}
              zoom={6}
            />
          </ListItem>
        ),

        value: args.slot
      })}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicColumns__ArgProps,
      internalVariantPropNames: PlasmicColumns__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicColumns__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicColumns";
  } else {
    func.displayName = `PlasmicColumns.${nodeName}`;
  }
  return func;
}

export const PlasmicColumns = Object.assign(
  // Top-level PlasmicColumns renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicColumns
    internalVariantProps: PlasmicColumns__VariantProps,
    internalArgProps: PlasmicColumns__ArgProps
  }
);

export default PlasmicColumns;
/* prettier-ignore-end */
