// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: HxsWCzVvbgXkQCjLyd31a
// Component: RKiTzdnnQgSpQ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Description from "../../Description"; // plasmic-import: 4GNQ1Ah9HXadT/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_code_component_examples_primary_copy.module.css"; // plasmic-import: HxsWCzVvbgXkQCjLyd31a/projectcss
import * as sty from "./PlasmicHomeHeader.module.css"; // plasmic-import: RKiTzdnnQgSpQ/css

export const PlasmicHomeHeader__VariantProps = new Array();

export const PlasmicHomeHeader__ArgProps = new Array("title");

function PlasmicHomeHeader__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <a
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(defaultcss.all, sty.link)}
        href={"/"}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Code components",
          value: args.title,
          className: classNames(sty.slotTitle)
        })}
      </a>

      <Description
        data-plasmic-name={"description"}
        data-plasmic-override={overrides.description}
        className={classNames("__wab_instance", sty.description)}
        description={
          <div
            data-plasmic-name={"box"}
            data-plasmic-override={overrides.box}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box
            )}
          >
            {"Examples of how to bring real components to Plasmic"}
          </div>
        }
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "link", "description", "box"],
  link: ["link"],
  description: ["description", "box"],
  box: ["box"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomeHeader__ArgProps,
      internalVariantPropNames: PlasmicHomeHeader__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicHomeHeader__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomeHeader";
  } else {
    func.displayName = `PlasmicHomeHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHomeHeader = Object.assign(
  // Top-level PlasmicHomeHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    description: makeNodeComponent("description"),
    box: makeNodeComponent("box"),
    // Metadata about props expected for PlasmicHomeHeader
    internalVariantProps: PlasmicHomeHeader__VariantProps,
    internalArgProps: PlasmicHomeHeader__ArgProps
  }
);

export default PlasmicHomeHeader;
/* prettier-ignore-end */
